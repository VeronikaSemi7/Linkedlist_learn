{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Копия блокнота \"Linkedlist_study.py\"","provenance":[{"file_id":"https://gist.github.com/VeronikaSemi7/f6ecfbee5a9e824cdd59f757c84a229f#file-classes-ipynb","timestamp":1626966425686}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"Q25T-Qg3Hd0k"},"source":["class Person:\n","    def __init__(self, name):\n","        self.name = name\n","        self.parents = []\n","        self.children = []\n","\n","class Family:\n","    def __init__(self, root):\n","        self.root = root"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Wi2m9a9TICU-"},"source":["fam = Family(Person(\"Fred\"))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tfzM-Hi0I0eQ"},"source":["class Node:\n","    def __init__(self, n):\n","        self.value = n\n","        self.next = None\n","\n","class LinkedList:\n","    def __init__(self, nd=None):\n","        self.head = nd\n","\n","    def add(self, nd):\n","        if not self.head:\n","            self.head = nd\n","            return\n","        h = self.head\n","        while h.next:\n","            h = h.next\n","        h.next = nd\n","\n","    def printout(self):\n","        h = self.head \n","        while h:\n","            print(h.value)\n","            h = h.next\n","\n","    def nullify(self):\n","        a = self.head\n","        while a:\n","             a.value = 0\n","             a = a.next\n","\n","    def print_value(self, n):\n","        s = self.head\n","        i = 1\n","        if n <= 0 :\n","            print('Wrong value') \n","            return\n","\n","        while s:\n","            if i == n :\n","                print(s.value) \n","                return \n","            i += 1 \n","            s = s.next\n","        print('Wrong value')\n","\n","    def len(self):\n","        s = self.head\n","        l = 0\n","        while s :\n","          l +=1\n","          s = s.next\n","        return l\n","\n","    def pop(self):\n","        # находим предпоследний элемент , у него делаем el.next=None\n","        s = self.head\n","        while s:\n","            while s.next.next:\n","                s = s.next\n","            s.next = None\n","            return \n","\n","     def push_front(self, nd):\n","        s = self.head\n","        self.head = nd \n","        nd.next = s\n","\n","    def pop_front(self):\n","        # достает первый элемент и выкидывает\n","        s = self.head\n","        self.head = s.next\n","        s.next = None\n","\n","        def push(self, nd, n):\n","        s = self.head\n","        i = 1\n","        while s:\n","            if i == n:\n","                t = s.next\n","                s.next = nd\n","                nd.next = t\n","                break\n","            i +=1\n","            s = s.next\n","        \n","        \n","            \n","\n","         \n","\n","   "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KCFiIKLLJmEw","outputId":"394afcd2-5f59-4af9-ef60-9ef7b7479120"},"source":["ll = LinkedList()\n","ll.add(Node(22))\n","ll.add(Node(43))\n","ll.add(Node(72))\n","ll.add(Node(145))\n","ll.print_value(5)\n","print(ll.len())\n","print(ll.pop())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Wrong value\n","4\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"HkWEGCGgJygE"},"source":["ll = LinkedList(Node(22))"],"execution_count":null,"outputs":[]}]}